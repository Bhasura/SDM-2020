{"version":3,"sources":["components/Navbar.jsx","components/Register.jsx","components/UserFunctions.js","pages/Signin.js","pages/Home.js","components/SearchForm.jsx","pages/Search.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Navbar","classes","AppBar","position","Toolbar","Typography","variant","className","Button","color","component","Link","to","Register","state","email","username","password","organisation","user_type","onChange","bind","onSubmit","e","this","setState","target","name","value","preventDefault","newUser","axios","post","then","response","console","log","register","res","Container","noValidate","TextField","margin","required","fullWidth","autoComplete","autoFocus","id","label","type","Component","Signin","Home","SearchForm","Search","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b1206009.chunk.js","sourcesContent":["import React from 'react'\nimport {Link} from 'react-router-dom'\nimport {\n    AppBar,\n    Toolbar,\n    Typography,\n    Button,\n    makeStyles\n  } from \"@material-ui/core\";\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  }));\n\nconst Navbar = () => {\n        const classes = useStyles()\n\n        return(\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>SEER</Typography>\n                    <Button color=\"inherit\" component={Link} to=\"/search\">Search</Button>\n                    <Button color=\"inherit\" component={Link} to=\"/register\">Register/Login</Button>\n                </Toolbar>\n            </AppBar>\n        )\n}\n\nexport default Navbar","import React from \"react\";\nimport { Component } from \"react\";\nimport {register} from \"./UserFunctions\";\nimport {\n  Button,\n  Container,\n  TextField,\n  Typography\n} from \"@material-ui/core\";\n\nexport default class Register extends Component {\n\n  constructor(){\n    super()\n    this.state = {\n      email: '',\n      username: '',\n      password: '',\n      organisation: '',\n      user_type: ''\n    }\n    this.onChange = this.onChange.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n\n  onChange(e) {\n    this.setState({ [e.target.name]: e.target.value })\n  }\n  onSubmit(e) {\n    e.preventDefault()\n\n    const newUser = {\n      email: this.state.email,\n      username: this.state.username,\n      password: this.state.password,\n      organisation: this.state.organisation,\n      user_type: this.state.user_type\n    }\n\n    register(newUser).then(res => {\n      //this.props.history.push(`/register`) //register instead of login because login hasn't been developed yet\n    })\n  }\n\n  render() {\n    return (\n      <Container component=\"main\">\n        <Typography component=\"h1\" variant=\"h5\">\n          Register\n        </Typography>\n        <form noValidate onSubmit = {this.onSubmit}>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            autoComplete=\"email\"\n            autoFocus\n            id=\"email\"\n            label=\"Email Address\"\n            name=\"email\"\n            value = {this.state.email}\n            onChange = {this.onChange}\n          ></TextField>\n          \n           <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            autoComplete=\"username\"\n            autoFocus\n            id=\"username\"\n            label=\"Username\"\n            name=\"username\"\n            value = {this.state.username}\n            onChange = {this.onChange}\n          ></TextField>\n          \n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            autoComplete=\"password\"\n            autoFocus\n            id=\"password\"\n            label=\"Password\"\n            name=\"password\"\n            value = {this.state.password}\n            onChange = {this.onChange}\n          ></TextField>\n          \n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            fullWidth\n            autoFocus\n            id=\"organisation\"\n            label=\"Organisation\"\n            name=\"organisation\"\n            value = {this.state.organisation}\n            onChange = {this.onChange}\n          ></TextField>\n          \n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            fullWidth\n            autoFocus\n            id=\"user_type\"\n            label=\"User Type\"\n            name=\"user_type\"\n            value = {this.state.user_type}\n            onChange = {this.onChange}\n          ></TextField>\n          \n          <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\">\n            Register\n          </Button>\n        </form>\n      </Container>\n    );\n  }\n}\n","import axios from 'axios'\n\nexport const register = newUser => {\n  return axios\n    .post('users/register', {\n      email: newUser.email,\n      username: newUser.username,\n      password: newUser.password,\n      organisation: newUser.organisation,\n      user_type: newUser.user_type\n    })\n    .then(response => {\n      console.log('Registered')\n    })\n}","import React, {Component} from 'react';\nimport Register from '../components/Register';\n\nexport default class Signin extends Component {\n\n    render () {\n        return (\n            <Register/>\n        )\n    }\n}","import React, { Component } from 'react';\n\nexport default class Home extends Component {\n\n    render () {\n        return (\n            <div>\n                <h3>Home Page</h3>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport { Component } from \"react\";\nimport {\n    Container,\n    Typography\n  } from \"@material-ui/core\";\n  \n\nexport default class SearchForm extends Component{\n    render() {\n        return (\n          <Container component=\"main\">\n            <Typography component=\"h1\" variant=\"h5\">\n              Search\n            </Typography>\n          </Container>\n        )\n    }\n}","import React, {Component} from 'react';\nimport SearchForm from '../components/SearchForm';\n\nexport default class Search extends Component {\n\n    render () {\n        return (\n            <SearchForm/>\n        )\n    }\n}","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\nimport Navbar from './components/Navbar'\nimport Signin from './pages/Signin'\nimport Home from './pages/Home'\nimport Search from './pages/Search'\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Navbar />\n          <Route exact path=\"/\" component={Home} />\n          <div className=\"container\">\n            <Route exact path=\"/search\" component={Search} />\n            <Route exact path=\"/register\" component={Signin} />\n          </div>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}